#!/usr/local/bin/bash

light_green='\033[92m'
green='\033[32m'
red='\033[31m'
blue='\033[34m'
clear='\033[0m'
orange="\033[38;5;11m"
purple='\033[35m'

####### Declaring default variables and lists
declare -i selected
declare key_input
ESC=$( printf "\033")
visibility_options=("public" "private" "internal")
license_options=("MIT License" "GNU Affero General Public License v3.0" "Apache License 2.0" "Boost Software License 1.0" "Creative Commons Zero v1.0 Universal" "Eclipse Public License 2.0" "GNU General Public License v2.0" "GNU General Public License v3.0" "GNU Lesser General Public License v2.1" "Mozilla Public License 2.0" "The Unlicense")
license_options_shortId=("MIT" "AGPL-3.0" "Apache-2.0" "BSL-1.0" "CC0-1.0" "EPL-2.0" "GPL-2.0-only" "GPL-3.0-only" "LGPL-2.1-only" "MPL-2.0" "Unlicense")

###### Functions to create the repo creation link
func_readme() {
    if [[ $add_readme = "yes" ]]; then
        create_repo=$create_repo" --add-readme"
    fi
}

func_license() {
    if [[ $add_license = "yes" ]]; then
        create_repo=$create_repo" --license $license_choice"
    fi
}

func_local_clone() {
    cwd=$(pwd)
    cd "$local_path" 2> /dev/null || { echo -e "${red}X Local directory \"$local_path\" doesn't exist.${clear}"; exit 0; }
    func_repo " --clone"
    echo -e "${blue}✓${clear} Cloned repository $project_name locally to path $local_path"
    cd "$cwd" || echo "Path error"
}

func_obs_note() {
    echo "Creating Obsidian note..."
    cp "/Users/suraj.kumar/Library/CloudStorage/GoogleDrive-asurajkumar.88@gmail.com/Other computers/My Laptop/g_sync/markdown_notes_vault/Templates/Temp personal Projects.md" "/Users/suraj.kumar/Library/CloudStorage/GoogleDrive-asurajkumar.88@gmail.com/Other computers/My Laptop/g_sync/markdown_notes_vault/Hidden/$project_name.md"
    echo -e "${purple}✓${clear} Obsidian note with name $project_name.md has been created."
}

func_repo() {
    echo "Creating Github repo..."
    create_repo="gh repo create $project_name --$visibility_choice"$1
    func_readme
    func_license
    
    for try in $(seq 1 5) ; do
        out=$($create_repo --description "${project_desc}" 2>&1)
        if [[ "${out[*]:32:${#project_name}}" = "$project_name" ]]; then
            echo -e "${orange}✓${clear} Created repository SurajKumar88/$project_name on Github"
            break
        elif [[ "${out[*]::8}" = "HTTP 422" ]]; then
            echo -e "${red}X A repository with this name already exists${clear}"
            exit 0
        else
            if [[ $try -eq 5 ]]; then
                echo "Github repo couldn't be created in 5 tries, please check inputs or connection."
                echo -e "${red}ERROR${clear} => $out"
                exit 0
            fi
        fi
    done
}

##### Functions for creating selection menu
create_menu() {
    selected=0
    options_list=("$@")
    option_len=${#options_list[@]}
    index_range=$option_len-1
    print_options
    while true; do
        get_key_input
        case $key_input in
            enter) break;;
            up) ((selected--))
                if [[ $selected -lt 0 ]]; then
                    selected=$index_range
                fi;;
            down) ((selected++))
                if [[ $selected -gt $index_range ]]; then
                    selected=0
                fi
        esac
        
        printf "\r\e["
        printf "%s" "$option_len"
        printf  "A"
        print_options
    done
    return $selected
}
print_options() {
    for opt in "${options_list[@]}"; do
        if [[ ${options_list[$selected]} = "$opt" ]]; then
            printf "%b - %b" "$green" "$clear"
            printf "%b$opt%b\n" "$green" "$clear"
        else
            echo "   $opt"
        fi
    done
}
get_key_input() {
    read -r -n3 -s key
    if [[ $key = "${ESC}[A" ]]; then
        key_input="up"
    elif [[ $key = "${ESC}[B" ]]; then
        key_input="down"
    elif [[ $key = "" ]]; then
        key_input="enter"
    fi
}

##### Secondary (helper) function for Primary functions

get_git_license_menu() {
    printf "%b?%b Choose Github License: \n" "$light_green" "$clear"
    create_menu "${license_options[@]}"; license_choice=${license_options_shortId[$selected]}
    printf "\r\e[12A\e[0J"
    printf "%b?%b Github License: %b${license_options[$selected]}%b\n" "$light_green" "$clear" "$light_green" "$clear"
}

##### Primary functions for Getting Project details
get_projectName() {
    printf "%b?%b Project name: " "$light_green" "$clear"
    regex='^[0-9A-Za-z!@#$%^&*()_+-={}|\;:<>/?"]+$' ##
    while read -r -N1 -s char; do
        case "$char" in
            $'\177') project_name=${project_name%?};;
            $' ')   project_name=$(printf '%s ' "$project_name");; # echo "Space is pressed";;
            $'\n')  if [[ $project_name =~ $regex ]]; then
                        # printf '\n'
                        break
                    else
                        printf '\r\e[K\e[31mX\e[0m Project name: \e[31m%s\e[0m {Spaces are not allowed}\n' "$project_name"
                    fi ;;
            *) project_name+=$char;;
        esac
        if [[ $project_name =~ $regex ]]; then
            printf "\r%b?%b Project name: \e[K" "$light_green" "$clear"
            printf '\e[32m'
        else
            printf "\r%bX%b Project name: \e[K" "$red" "$clear"
            printf '\e[31m'
        fi
        printf '%s\e[0m' "$project_name"
    done
    printf "\r\e[K%b?%b Project name: %b$project_name%b \n" "$light_green" "$clear" "$light_green" "$clear"
}

get_proj_desc() {
    printf "%b?%b Project Description: " "$light_green" "$clear"
    read -r project_desc
}

get_git_visibility() {
    printf "%b?%b Github Visibility: \n" "$light_green" "$clear"
    create_menu "${visibility_options[@]}"; visibility_choice=${visibility_options[$selected]}
    printf "\r\e[4A\e[0J"
    printf "%b?%b Github Visibility: %b$visibility_choice%b\n" "$light_green" "$clear" "$light_green" "$clear"
}

get_git_license() {
    echo -n -e "${light_green}?${clear} Do you want to add License?: (y/N) " ; read -r add_license
    if [[ $add_license = "yes" || $add_license = "y" ]]; then
        add_license="yes"
        printf "\r\e[1A\e[0J%b?%b Do you want to add License?: %byes%b \n" "${light_green}" "${clear}" "${light_green}" "${clear}" 
        get_git_license_menu
    elif [[ $add_license = "no" || $add_license = "n" || $add_license = "" ]]; then
        add_license="no"
        printf "\r\e[1A\e[0J%b?%b Do you want to add License?: %bno%b \n" "${light_green}" "${clear}" "${red}" "${clear}" 
    # elif [[ $add_license = "" ]]; then
    #     add_license="no"
    #     printf "\r\e[0J%b?%b Do you want to add License?: %bno%b \n" "${light_green}" "${clear}" "${red}" "${clear}"     
    fi
}

get_git_readme() {
    echo -n -e "${light_green}?${clear} Do you want to add a README file?: (y/N) "; read -re add_readme
    if [[ $add_readme = "yes" || $add_readme = "y" ]]; then
        add_readme="yes"
        printf "\r\e[1A\e[0J%b?%b Do you want to add a README file?: %byes%b \n" "${light_green}" "${clear}" "${light_green}" "${clear}"
    elif [[ $add_readme = "no" || $add_readme = "n" ]]; then
        add_readme="no"
        printf "\r\e[1A\e[0J%b?%b Do you want to add a README file?: %bno%b \n" "${light_green}" "${clear}" "${red}" "${clear}"
    elif [[ $add_readme = "" ]]; then
        add_readme="no"
        printf "\r\e[0J%b?%b Do you want to add a README file?: %bno%b \n" "${light_green}" "${clear}" "${red}" "${clear}"     
    fi
}

get_args() {
    get_projectName
    get_proj_desc
    get_git_visibility
    get_git_license
    get_git_readme
    
    echo -n -e "${light_green}?${clear} Do you want to clone the repo locally?: (y/N) "; read -re add_local_clone
    if [[ $add_local_clone = "yes" || $add_local_clone = "y" ]]; then
        add_local_clone="yes"
        printf "\r\e[1A\e[0J%b?%b Do you want to clone the repo locally?: %byes%b \n" "${light_green}" "${clear}" "${light_green}" "${clear}"
        printf "%b?%b Path for local directory (leave empty for CWD): " "$light_green" "$clear"
        read -re local_path
        if [[ -z $local_path ]]; then
            printf "\n"
            local_path=$(pwd)
        fi
    elif [[ $add_local_clone = "no" || $add_local_clone = "n" ]]; then
        add_local_clone="no"
        printf "\r\e[1A\e[0J%b?%b Do you want to clone the repo locally?: %bno%b \n" "${light_green}" "${clear}" "${red}" "${clear}"
    elif [[ $add_local_clone = "" ]]; then
        add_local_clone="no"
        printf "\r\e[0J%b?%b Do you want to clone the repo locally?: %bno%b \n" "${light_green}" "${clear}" "${red}" "${clear}"     
    fi
    printf "%b?%b This will create \"$project_name\" as a $visibility_choice repo on Github, " "${light_green}" "${clear}"
    if [[ $add_local_clone = "yes" ]]; then
        printf "a local clone at path %s " "$local_path"
    fi
    printf "and a obsidian note!!!\n"
    printf "%b?%b Do you want to continue?: (Y/n) " "${light_green}" "${clear}"
    read -r continue
    if [[ $continue = "yes" || $continue = "y" ]]; then
        :
    elif [[ $continue = "no" || $continue = "n" ]]; then
        exit 0
    elif [[ $continue = "" ]]; then
        :
    fi
}       

main() {

    get_args
    if [[ $add_local_clone = "yes" ]]; then
        func_local_clone
    else
        func_repo
    fi
    # func_obs_note
    echo -e "${green}✓${clear} Project $project_name has been initiated successfully!!!"
}

main "$@"